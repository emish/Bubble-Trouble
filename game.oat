#include "console.oat"
#include "list.oat"
#include "math.oat"

/* Helper debug print that lets us print to console */
unit debug_print(string msg) {
  int k = 0;
  con_clear();
  con_print(msg);
  while (k == 0) {
    k = con_getch();
  }
  con_refresh();
  return;
}

/* Global game elements and settings */
/* Dimensions of the playing field. So objects can bounce back */ 
int max_x = 120;
int max_y = 35;
int max_y_real = 37; /* The dimension of the whole stage including text area: (max_y + 2) */

/* All elements in a game are of this type. All elements 
 * have coordinates on screen */
class GameObject <: Object {
  int x;  
  int y; 
  /* Constructor */
  new (int x, int y)() 
  {
    this.x = x;
    this.y = y;
  }
  
  /* initialization code */
  unit init() { return; }

  /* overloaded in subclasses */
  unit draw() { return; }
};


/* A DelayedObject moves on the screen with time. It 
 * is animated */
class DelayedObject <: GameObject {
  int delay;
  int current_delay;

  /* constructor */
  new(int x, int y)(x,y) {
    this.delay = 5; /* The default delay for any object */
  }

  /* called after each delay */
  int move() { return 1; }

  /* update the delay of delayed object */
  int update() {
    int keep = 1;
    this.current_delay = this.current_delay + 1;
    if (this.current_delay >= this.delay) {
      /* time to do the update */

      keep = this.move();
      
      /* reset the clock */
      this.current_delay = 0;
    }
    return keep;
  }
  
};


/*************** GUY OBJECT ***************/
/* The main player at the bottom of screen. */
class Guy <: GameObject {
  string[][] pic; /* bitmap of player */
  int sizex; /* width */
  int sizey; /* height */
  int frames; /* different frames for going left and right */
  int current_frame; /* what is the current frame to print */

  /* Create a new guy with default values */
  new (int lives)(con_width() >> 1, (con_height() - ((con_height() - max_y) >> 1)) - 1)
    this.pic = new [2](fun i -> new [4](fun i -> ""));
    this.frames = 2;
  {
    this.sizey = 4;
    this.sizex = 4;
    this.current_frame = 1;
  }

  /* Initialize a new guy's bitmaps */
  unit init() {
    this.pic[0][0] = " ,,,";
    this.pic[0][1] = " oo'";
    this.pic[0][2] = ".||.";
    this.pic[0][3] = " dd ";
    this.pic[1][0] = " ```";
    this.pic[1][1] = " 'oo";
    this.pic[1][2] = " .||.";
    this.pic[1][3] = "  dd ";
    return;
  }

  /* move the guy left, change the frame to left type */
  unit move_left() {
    int border_x = (con_width() - max_x) >> 1;
    if (this.x > border_x + 1) 
      this.x = this.x - 1;
    this.current_frame = 0;
    return;
  }

  /* move the guy right, change the frame to right type */
  unit move_right() {
    int border_x = (con_width() - max_x) >> 1;
    if ((this.x + this.sizex) < con_width() - border_x - 1 ) 
      this.x = this.x + 1;
    this.current_frame = 1;
    return;
  }

  /* Instructions for drawing the guy. */
  unit draw() {
    for (int j = 0; j < this.sizey; j = j+1;) {
      con_move(this.x, this.y + j - this.sizey + 1);
      if (j == 0) {
	con_attrset(con_color(3));
      }
      else if (j == 2) {
	con_attrset(con_color(1));
      }
      else if (j == 3) {
	con_attrset(con_color(0));
      }
      con_print(this.pic[this.current_frame][j]);
      con_move(0,0);
      con_attrset(con_color(0));
    }
    return;
  }
};


/********************* BUBBLE OBJECT ************************/
/* Bubbles are the major component. They have physics, bouncing,
 they float around and have collision detection with walls, floor,
 and the Guy. */
class Bubble <: DelayedObject {
  int dirx; /* -1 = left, 0 = immobile, 1 = right */
  int diry; /* -1 = down, 0 = immobile, 1 = up */
  int bubblesize; /* The ball size out of 4 */
  int sizex;  /* dimensions of the bubble */
  int sizey;
  int dy; /* acceleration in y direction */
  int dy_max; /* What the acceleration max is for this ball size */
  int color; /* Color of the bubble */
  Guy guy; /* For collision detection */
  string[] pic;    /* pic[frame][i] represents line i of frame frame */

  /* To be used for drawing popping animation on balloon pop, but no time */
  /* int frames; /* for drawing */
  /* int current_frame; */
  
  /* Create new bubble object */
  new (int x, int y, int bubblesize, int dirx, int diry, Guy guy)(x,y)
    this.pic = new [9](fun i -> ""); /* here need different sized arrays for different size balloons*/
    this.guy = guy;
  {
    this.dirx = dirx;
    this.diry = diry;
    this.bubblesize = bubblesize;
    /* this.frames = 1; Gonna add one for popping animation, will need to manually call from blowup()*/
    /* this.current_frame = 1;*/
    this.delay = 3;
    this.current_delay = 0; /* Might want to put this in the delayed object ctor */
    this.dy = 1;
  }

  /* Initializes the ball. Based on ballsize, creates appropriate bitmap, and 
   * initializes the respective values for the fields. */
  unit init () {
    if (this.bubblesize == 0) {
      this.sizey = 1;
      this.sizex = 1;
      this.dy_max = 3;
      this.color = 6;
      this.pic[0] = " () ";
    }
    if (this.bubblesize == 1) {
      this.sizey = 2;
      this.sizex = 4;
      this.dy_max = 4;
      this.color = 1;
      this.pic[0] = " /\"\"\\ ";
      this.pic[1] = " \\__/ ";
      this.pic[2] = "";
      this.pic[3] = "";
      this.pic[4] = "";
      this.pic[5] = "";
      this.pic[6] = "";
      this.pic[7] = "";
      this.pic[8] = "";
    }
    else if (this.bubblesize == 2) {
      this.sizey = 4;
      this.sizex = 7;
      this.dy_max = 5;
      this.color = 2;
      this.pic[0] = "   __   ";
      this.pic[1] = " /    \\ ";
      this.pic[2] = "|      |";
      this.pic[3] = " \\ __ / ";
      this.pic[4] = "";
      this.pic[5] = "";
      this.pic[6] = "";
      this.pic[7] = "";
      this.pic[8] = "";
    }
    else if (this.bubblesize == 3) {
      this.sizey = 6;
      this.sizex = 13;
      this.dy_max = 6;
      this.color = 3;
      this.pic[0] = "     _____     ";
      this.pic[1] = "  .'       `.   ";
      this.pic[2] = " /           \\  ";
      this.pic[3] = " |           |  ";
      this.pic[4] = " \\           /  ";
      this.pic[5] = "  `. _____ .'   ";
      this.pic[6] = "";
      this.pic[7] = "";
      this.pic[8] = "";
    }
    else if (this.bubblesize == 4) {
      this.sizey = 9;
      this.sizex = 18;
      this.dy_max = 7;
      this.color = 4;
      this.pic[0] = "     _.-\"\"\"\"-._     ";
      this.pic[1] = "   .'          `.   ";
      this.pic[2] = "  /              \\  ";
      this.pic[3] = " |                | ";
      this.pic[4] = " |                | ";
      this.pic[5] = " |                | ";
      this.pic[6] = "  \\              /  ";
      this.pic[7] = "   `._        _.'   ";
      this.pic[8] = "      `-....-'      ";
    }
    return;
      
}

  unit change_x_direction() {
    this.dirx = 0 - this.dirx;
    return;
  }

  unit change_y_direction() {
    this.diry = 0 - this.diry;
    return;
  }

  /* To be used to change frame of bubble */
  unit blowup() {return;}

  /* If a bubble hits a wall, it changes x directions */
  unit hit_wall() {
    /* reverse x coord, change directions */
    this.change_x_direction();
    return;
  }

  /* If a bubble hits the floor it changes y direction */
  unit hit_floor() {
    this.change_y_direction();
    return;
  }

  /* The physics and movement of the bubble. First required stage dimensions are calculated,
     then the movements are calculated, then the y acceleration */
  int move() {
    /* update the current frame */
    /* this.current_frame = oat_mod (this.current_frame + 1, this.frames);*/
    int border_x = (con_width() - max_x) >> 1;
    int border_y = (con_height() - max_y) >> 1;
    int collide_x_left = border_x;
    int collide_x_right = con_width() - border_x;
    int collide_y_bot = con_height() - border_y;
    /* x movement */
    if (this.dirx == -1) {
      /* moving left */
      if (this.x <= collide_x_left) 
	this.hit_wall(); 
      else {
	if (this.x - 2 <= collide_x_left)
	  this.x = collide_x_left;
	else 
	  this.x = this.x - 2;
      }
    }
    else if (this.dirx == 1) {
      /* Moving right */
      if (this.x + this.sizex >= collide_x_right) 
	this.hit_wall(); 
      else {
	if (this.x + 2 + this.sizex >= collide_x_right)
	  this.x = collide_x_right - this.sizex;
	else
	  this.x = this.x + 2;
      }
    }

    /* y movement */
    if (this.diry == -1) {
      /* moving down */
      if (this.y  == collide_y_bot - this.sizey) {
	this.hit_floor();
	this.dy = this.dy_max;
	this.y = this.y - this.dy;
	this.dy = this.dy - 1;
      }
      else {
	int temp_y = this.y + this.dy;
	if (temp_y >= collide_y_bot - this.sizey)
	  temp_y = collide_y_bot - this.sizey;
	this.y = temp_y;
	this.dy = this.dy + 1;
      }
    }
    else if (this.diry == 1) {
      this.y = this.y - this.dy;
      this.dy = this.dy - 1;
    }
    if (this.dy == 0) 
      this.change_y_direction();
    return 1;
  }

  /* Calculates if there is a collision between this instance of the bubble 
     and the guy object */
  int collision() {
    int coll = 0;
    if (
	((this.x + this.sizex >= this.guy.x) &
	 (this.y + this.sizey >= this.guy.y) & 
	 (this.x < this.guy.x))
	|
	((this.x >= this.guy.x) &
	 (this.x <= this.guy.x + this.guy.sizex) &
	 (this.y + this.sizey >= this.guy.y))
	)
      {
	coll = 1;
      }
    return coll;
  }

  /* Drawing instructions for the bubble class */
  unit draw() {
    for (int j = 0; j < this.sizey; j = j+1;) {
      con_move(this.x, this.y + j);
      con_attrset(con_color(this.color));
      con_print(this.pic[j]);
      con_attrset(con_color(0));
      con_move(0,0);
    }
    return;
  }
};


/***************** HARPOON *******************/
/* Harpoon is fired from the guy to pop bubbles. */
class Harpoon <: DelayedObject {
  int dir;   /* -1 = up, +1 = down */
  int sizey; /* How long the harpoon has extended */
  string[] pic;
  Guy guy; /* For new bubble creation */
  List bubbles;  /* for collision detection */

  /* New instance of harpoon. Only one allowed at a time */
  new (int x, int y, List bubbles, Guy guy)(x,y) 
    this.pic = new [max_y](fun i -> "");
    this.bubbles = bubbles;
    this.guy = guy;
  {
    this.dir = -1;    /* start moving up */
    this.delay = 1;
    this.sizey = 3;   /* because guy has height */
  }

  /* Initialize the harpoon bitmap */
  unit init() {
    this.pic[0] = "^";
    this.pic[1] = "|";
    for (int i = 3; i < max_y; i = i+2;) {
      this.pic[i] = "(";
    }
    for (int i = 2; i < max_y; i = i+2;) {
      this.pic[i] = ")";
    }
    return;
  }

  /* Check for collision between the harpoon and all bubbles in the playing
     stage. */
  int collision() {
    int keep = 1;
    ListItem? cursor = this.bubbles.head;
    while (cursor != null) {
      if?( ListItem item = cursor) {
        if?( Object o = item.obj ) {
          cast (Bubble b = o) {
	    for (int i = 0; i < this.sizey; i=i+1;) {
	      if ((b.x <= this.x) &
		  (this.x <= b.x + b.sizex) &
		  (b.y <= this.y + i) &
		  (this.y + i <= b.y + b.sizey)) {
		int x = b.x;
		int y = b.y;
		int new_size = -1;
		b.blowup();
		this.bubbles.remove(item);
		/* This is where we split bubbles */
		if (b.bubblesize == 1)
		  new_size = 0;
		else if (b.bubblesize == 2) 
		  new_size = 1;
		else if (b.bubblesize == 3)
		  new_size = 2;
		else if (b.bubblesize == 4)
		  new_size = 3;

		if (new_size >= 0) {
		  Bubble b1 = new Bubble(x+2, y-2, new_size, 1, 1, this.guy);
		  Bubble b2 = new Bubble(x-2, y-2, new_size, -1, 1, this.guy);
		  b1.init();
		  b2.init();
		  this.bubbles.insert(b1);
		  this.bubbles.insert(b2);
		  
		}
		  keep = 0;
		  i = this.sizey;
	      }
	    }
          }
        }
        cursor = item.next;
      }
    }
    return keep;
  }

  /* Update the coordinates of harpoon. */
  int move () {
    int keep = 1;
    if (this.dir < 0) {
      int border_y = (con_height() - max_y)  >> 1;
      if (this.y == (border_y + 3 + 3)) keep = 0; else this.y = this.y - 1;
    }
    else keep = 1;
    if (keep==1) {
      if (this.sizey < max_y) {
	this.sizey = this.sizey + 1;
      }
      keep = this.collision();
    }
    return keep;
  }

  /* Instructions for how to draw the harpoon. */
  unit draw() {
    for (int j = 0; j < this.sizey; j = j+1;) { 
      con_move(this.x, this.y + j - 3);
      con_print(this.pic[j]);
      con_move(0,0);
    }
    return;
  }

};

/* Performs an update call on all elements of the given list of DelayedObjects. */
unit update_list(List l) {
    /* update the game objects */
    ListItem? cursor = l.head;
    while (cursor != null) {
      if?( ListItem item = cursor) {
        if?( Object o = item.obj ) {
          cast (DelayedObject dobj = o) {
            int keep = dobj.update();
            if (!keep) l.remove(item);
          }
        }
        cursor = item.next;
      }
    }
    return;
  }

/* Performs a draw call on all elements of the given list of DelayedObjects. */
unit draw_list(List l) {
    /* update the game objects */
    ListItem? cursor = l.head;
    while (cursor != null) {
      if?( ListItem item = cursor) {
        if?( Object o = item.obj ) {
          cast (DelayedObject dobj = o) {
            dobj.draw();
          }
        }
        cursor = item.next;
      }
    }
    return;
  }


/******************** STAGE OBJECT *****************/
/* This holds all the information that is to be displayed on the stage. 
 * It is syncronized with the Game State object. */
class Stage <: GameObject {
  int width; /* the width of the playing field */
  int height; /* the height of the playing field */
  int title_x; /* the location of the title text */
  int title_y; 
  int level; /* The current level of the game */
  int time; /* How much time is left in the current level. */
  int time_delay; /* The time delay for decrementing by one unit of "time" */
  int time_current_delay; /* The current delay accumulated trying to reach the time_delay. */
  int lives; /* How many lives are left for the player */
  int score; /* The score accumulated by the player */
  string game_title; /* Title text displayed on top */
  
  /* Create a new stage object */
  new ()(0,0)
    this.game_title = "BUBBLE TROUBLE!";
    this.time_delay = 30;
  {
    this.width = max_x;
    this.height = max_y; 
    this.title_x = max_x >> 2 - 7;
  }

  /* Initializes the stage.
   * Level initializers should be abstracted out */
  unit init() {
    this.lives = 5;
    this.score = 0;
    this.level = 1;
    this.time = 20;
    this.time_current_delay = 0;
    return;
  }

  /* Loads the next level, updates the score and resets the time */
  unit next_level() {
    this.score = this.score + (this.time * 100);
    this.time = 20;
    this.time_current_delay = 0;
    this.level = this.level + 1;
    return;
  }

  /* Restarts the current level, just resets the time.  
     to be called when a life is lost */
  unit restart_level() {
    this.time = 20;
    return;
  }

  /* Ends the current game, should display a score screen and game over message */
  unit game_over() {
    return;
  }

  /* Decrements life by one and returns number of lives left */
  int lose_life() {
    this.lives = this.lives - 1;
    return this.lives;
  }

  /* Decreases the time. Returns how much time is left */
  int lose_time() {
    this.time_current_delay = oat_mod(this.time_current_delay + 1, this.time_delay);
    if (this.time_current_delay == 0)
      this.time = this.time - 1;
    return this.time;
  }

  /* Updates the stage: No current function */
  unit update() {
    this.lives = 20;
    this.draw();
    return;
  }

  /* Draws the whole stage */
  /* Right now this is hard-coded; how best to represent a stage? */
  unit draw() {
    int score_offset = max_y_real - max_y;
    /* the distance of the border from the console border */
    int border_x = oat_div((con_width() - this.width), 2);
    int border_y = oat_div((con_height() - this.height), 2);
    /* Draw the top and bottom borders and the score border */
    for (int i = border_x + 1; i < (con_width() - border_x); i = i+1;) {
      /* ceiling */
      con_move(i, border_y);
      con_print("-");
      /* floor */
      con_move(i, (con_height() - border_y));
      con_print("-");
      /* score border */
      con_move(i, border_y + score_offset);
      con_print("-");
    }
    
    /* Draw the left and right borders */
    for (int i = border_y; i < (con_height() - border_y) + 1; i = i+1;) {
      con_move(border_x, i);
      con_print("|");
      con_move((con_width() - border_x), i);
      con_print("|");
    }

    /* Draw title in the top bar */
    con_attrset(con_color(3));
    con_move((con_width() >> 1) - (length_of_string(this.game_title)>>1), 
	     border_y + 1);
    con_print(this.game_title);
    con_attrset(con_color(0));
    
    /* Health bar */
    con_move(border_x + 2, border_y + 3);
    con_print("LIVES:  ");
    con_attrset(con_color(1));
    for (int i = border_x + 10; i < border_x + 10 + this.lives; i = i+1;){
      con_move(i, border_y+3);
      con_print("*");
    }
    con_attrset(con_color(0));

    /* Points bar */
    con_move(border_x + 2, border_y + 4);
    con_print("POINTS: ");
    con_attrset(con_color(1));
    con_move(border_x + 10, border_y + 4);
    con_print(string_of_int(this.score));
    con_attrset(con_color(0));

    /* Level bar */
    con_move(con_width() - border_x - 6, border_y + 3);
    con_print("LEVEL");
    con_move(con_width() - border_x - 8, border_y + 3);
    con_attrset(con_color(2));
    con_print(string_of_int(this.level));
    con_attrset(con_color(0));

    /* Timer bar */
    con_move(con_width() - border_x - 10, border_y + 4);
    con_print("TIME LEFT");
    for (int i = 0; i < this.time; i = i+1;){
      con_attrset(con_color(2));
      con_move(con_width() - border_x - 12 - i, border_y + 4);
      con_print("#");
    }
    con_attrset(con_color(0));
    
    con_move(0,0);
    /* con_attrset(con_color(0)); */

    con_move(0,0);
    return;
  }
};

/******************** GAME STATE ********************/
/* A game state takes care of all internal game logic, but not collision directly. It 
performs updates on all objects, keeps track of all objects, and handles game mechanics such
as quitting, winning, resetting, new stages, etc... */
class State <: Object {
  Guy guy;
  Stage stage;

  /* A list of DelayedObjects - Bubbles*/
  List bubbles;
  List harpoons;

  int quit; /* Says whether or not to exit the game */
  int pause; /* Pause defines if a game is paused */
  int current_delay; /* Delay for countdown */
  int delay;
  int count; /* How long to count */
  int win; /* 1 = Won whole game, 0 = Lost at some level, 2 = currently playing */
  string[][] count_pic; /* Pictures of the countdown */
  string[][] won_lost; /* Pictures for winning and losing screens */
  string[] pause_pic; /* Picture of a pause sign */

  /* Create a new game state*/
  new ()()
  this.bubbles = new List();
  this.harpoons = new List();
  this.guy = new Guy(10);
  this.stage = new Stage();
  this.quit = 0;
  this.pause = 1; /* 0 = running; 1 = countdown; 2 = paused */
  this.current_delay = 0;
  this.delay = 12;
  this.count = 3;
  this.win = 2; /* 0 = lost; 1 = won; 2 = regular; */
  this.count_pic = new [3](fun i -> new [8](fun i -> ""));
  this.won_lost = new [2](fun i -> new [6](fun i -> ""));
  this.pause_pic = new [6] (fun i -> "");
  {

  }
  
  /* Creates a new bubble in game, tracks them in list
   * input: position and size */
  unit create_bubble(int x, int y, int bubblesize, int xdir, int ydir) {
    Bubble b = new Bubble(x, y, bubblesize, xdir, ydir, this.guy);
    b.init();
    this.bubbles.insert(b);
    return;
  }
  
  /* initializes the game state, currently implies entire restart
   * change the hard-coded bubble */
  unit init() {
    this.stage.init(); /* clean restart */
    this.guy.init();
    /* call to add_bubbles here */
    this.load_bubbles();

    this.count_pic[2][0] = "   _  _  _  _     ";
    this.count_pic[2][1] = " _(_)(_)(_)(_)_   ";
    this.count_pic[2][2] = "(_)          (_)  ";
    this.count_pic[2][3] = "         _  _(_)  ";
    this.count_pic[2][4] = "        (_)(_)_   ";
    this.count_pic[2][5] = " _           (_)  ";
    this.count_pic[2][6] = "(_)_  _  _  _(_)  ";
    this.count_pic[2][7] = "  (_)(_)(_)(_)    ";

    this.count_pic[1][0] = "    _  _  _       ";
    this.count_pic[1][1] = " _ (_)(_)(_) _    ";
    this.count_pic[1][2] = "(_)         (_)   ";
    this.count_pic[1][3] = "          _ (_)   ";
    this.count_pic[1][4] = "       _ (_)      ";
    this.count_pic[1][5] = "    _ (_)         ";
    this.count_pic[1][6] = " _ (_) _  _  _    ";
    this.count_pic[1][7] = "(_)(_)(_)(_)(_)   ";

    this.count_pic[0][0] = "    _          ";
    this.count_pic[0][1] = " _ (_)         ";
    this.count_pic[0][2] = "(_)(_)         ";
    this.count_pic[0][3] = "   (_)         ";
    this.count_pic[0][4] = "   (_)         ";
    this.count_pic[0][5] = "   (_)         ";
    this.count_pic[0][6] = " _ (_) _       ";
    this.count_pic[0][7] = "(_)(_)(_)      ";

    this.won_lost[0][0] = " _____   ___  ___  ___ _____   _____  _   _ ___________ ";
    this.won_lost[0][1] = "|  __ \\ / _ \\ |  \\/  ||  ___| |  _  || | | |  ___| ___ \\"; 
    this.won_lost[0][2] = "| |  \\// /_\\ \\| .  . || |__   | | | || | | | |__ | |_/ /";
    this.won_lost[0][3] = "| | __ |  _  || |\\/| ||  __|  | | | || | | |  __||    / ";
    this.won_lost[0][4] = "| |_\\ \\| | | || |  | || |___  \\ \\_/ /\\ \\_/ / |___| |\\ \\ ";
    this.won_lost[0][5] = " \\____/\\_| |_/\\_|  |_/\\____/   \\___/  \\___/\\____/\\_| \\_|";

    this.won_lost[1][0] = "__   _______ _   _   _    _  _____ _   _ _ ";
    this.won_lost[1][1] = "\\ \\ / /  _  | | | | | |  | ||  _  | \\ | | |";
    this.won_lost[1][2] = " \\ V /| | | | | | | | |  | || | | |  \\| | |";
    this.won_lost[1][3] = "  \\ / | | | | | | | | |/\\| || | | | . ` | |";
    this.won_lost[1][4] = "  | | \\ \\_/ / |_| | \\  /\\  /\\ \\_/ / |\\  |_|";
    this.won_lost[1][5] = "  \\_/  \\___/ \\___/   \\/  \\/  \\___/\\_| \\_(_)";

    this.pause_pic[0] = "______  ___  _   _ _____ ___________ ";
    this.pause_pic[1] = "| ___ \\/ _ \\| | | /  ___|  ___|  _  \\";
    this.pause_pic[2] = "| |_/ / /_\\ \\ | | \\ `--.| |__ | | | |";
    this.pause_pic[3] = "|  __/|  _  | | | |`--. \\  __|| | | |";
    this.pause_pic[4] = "| |   | | | | |_| /\\__/ / |___| |/ / ";
    this.pause_pic[5] = "\\_|   \\_| |_/\\___/\\____/\\____/|___/  ";


    return;
  }

  /* Updates the state that a harpoon has been fired */
  unit fire_harpoon() {
    if (this.harpoons.is_empty()) {
      Harpoon b = new Harpoon(this.guy.x+1, this.guy.y+1, this.bubbles, this.guy);
      b.init();
      this.harpoons.insert(b);
    }
    return;
  }

  /* Clears all objects and refreshes the state */
  unit clean_objects() {
    this.bubbles = new List();
    this.harpoons = new List();
    return;
  }

  /* Called when the character runs out of lives */
  unit game_over() {
    /* Clear all, clear stage, display message, allow for restart or quit */
    int k = 0;
    this.clean_objects();
    con_move(0,0);
    this.win = 0;
    this.win = 0;
    return;
  }

  /* Creates bubble objects according to level description */
  unit load_bubbles() {
    /* Stage grid initializers, used for placing bubbles */
    int level = this.stage.level;
    int border_y = (con_height() - max_y) >> 1;
    int border_x = (con_width() - max_x) >> 1;
    int y_4 = max_y >> 2;
    int x_4 = max_x >> 2;
    int grid_x1 = x_4 + border_x;
    int grid_x2 = x_4 + x_4 + border_x;
    int grid_x3 = x_4 + x_4 + x_4 + border_x;
    int grid_y1 = border_y + y_4;
    int grid_y2 = border_y + y_4 + y_4;
    int grid_y3 = border_y + y_4 + y_4 + y_4;
    /* Set pause on to prepare player */
    this.pause = 1;
    this.count = 3;
    /* One 1 size ball on top left moving right */
    if (level == 1) {
      this.create_bubble(grid_x1, grid_y1 , 1, 1, 1);
    }
    /* One 2 size ball on top left moving right */
    else if (level == 2) {
      this.create_bubble(grid_x1, grid_y1, 2, 1, 1);
    }
    /* One 3 size ball in top middle, moving left */
    else if (level == 3) {
      this.create_bubble(grid_x2, grid_y1, 3, 1, -1);
    }
    /* One size 2 ball in the top left, one size 3 ball in top right */
    else if (level == 4) {
      this.create_bubble(grid_x1, grid_y1, 2, 1, -1);
      this.create_bubble(grid_x3, grid_y1, 3, 1, 1);
    }
    /* 4 in top middle */
    else if (level == 5) {
      this.create_bubble(grid_x2, grid_y1, 4, 1, 1);
    }
    /* 1 in top left, 1 in top right, 3 in middle */ 
    else if (level == 6) {
      this.create_bubble(grid_x1, grid_y1, 1, 1, 1);
      this.create_bubble(grid_x3, grid_y1, 1, 1, -1);
      this.create_bubble(grid_x2, grid_y1, 3, 0, 1);
    }
    /* Any other level is a game won */
    else {
      this.win = 1;
    }
    return;
  }

  /* Called on a level restart */
  unit restart_level() {
    /* Clear all bubbles, clear harpoon, recreate the level, restart the stage */
    this.clean_objects();
    this.stage.restart_level();
    this.load_bubbles();
    return;
  }

  /* A loss of a life or running out of time calls this function */
  unit lose_level() {
    int lives = this.stage.lose_life();
    if (lives == 0) 
      this.game_over();
    else {
      this.restart_level();
    }
    return;
  }

  /* Starts the next level, calls stage next_level, reinitializes guy */
  unit next_level() {
    this.stage.next_level();
    this.guy.init();
    this.load_bubbles();
    return;
  }
  
  /* Checks for collisions between all bubbles and the guy */
  int is_killed() {
    int killed = 0;
    ListItem? cursor = this.bubbles.head;
    while (cursor != null) {
      if?( ListItem item = cursor) {
	  if? (Object o = item.obj) {
	      cast (Bubble b = o) {
		if (b.collision() == 1)
		  killed = b.collision();
	      }
	    }
      cursor = item.next;	
	}
    }
    return killed;
  }

  /* update the game state using keyboard input k
  * might want collision detection here instead */
  unit update(int k) {
    /* If we're not paused, update the game logics */
    if (!this.pause){
      /* update the guy */
      if (k == 106)
	this.guy.move_left();
      if (k == 108)
	this.guy.move_right();
      if (k == 32) {
	this.fire_harpoon();
      }
      /* Check for death */
      if (this.is_killed() == 1) {
	this.lose_level();
      }
      /* Check for win */
      else if (this.bubbles.is_empty() & this.win == 2){
      	this.next_level();
      }
      /* Update moving/delayed objects */
      update_list(this.bubbles);
      update_list(this.harpoons);
      /* Decrement time */
      if (this.stage.lose_time() == 0) {
	this.lose_level();
      }
    }
    if (this.pause == 2){
      int key = 0;
      key = con_getch();
      while (key != 80 & key != 112){
	key = con_getch();
	this.drawPause();
      }
      this.pause = 0;
    }
    /* Otherwise, continue countdown */
    else {
      /* the delay mechanism delays the screen */
      /* every second this method, update, is being */
      /* called and then it stays up for about a */
      /* second and during that time we take advantage */
      /* to not allow for moves */
      this.current_delay = this.current_delay + 1;
      if (this.current_delay >= this.delay){
	this.count = this.count - 1;
	this.current_delay = 0;
	if (this.count == 0){
	  this.pause = 0;
	}
      }
    }
    
    return;
  }
  
  /* Draws the paused screen */
  unit drawPause(){
    for (int i=0; i < length_of_array(this.pause_pic); i=i+1;){
      con_move((con_width() >> 1) - 20, (con_height() >> 1) + i);
      con_print(this.pause_pic[i]);
    }
    return;
  }

  /* Redraws the scene. Contains all game elements to call draw methods */
  unit display() {
    int k = 0;
    con_clear();  
    /* draw the bubbles n harpoons */
    draw_list(this.bubbles);
    draw_list(this.harpoons);
    /* draw guy */
    this.guy.draw();
    /* draw the stage */
    this.stage.draw();
    con_move(0,0);
    /* pause 1 is countdown */
    if(this.pause == 1){
      /* print the counter */
      for (int i=0; i < length_of_array(this.count_pic[this.count-1]); i=i+1;){
	con_move(con_width() >> 1, (con_height() >> 1) + i);
	con_print(this.count_pic[this.count-1][i]);
      }
    }
    /* message on won */
    if(this.win == 1){
      con_clear();
      for (int i=0; i < length_of_array(this.won_lost[this.win]); i = i+1;){
	con_move((con_width() >> 1) - 20, (con_height() >> 1) + i);
	con_print(this.won_lost[this.win][i]);
      }
      con_move(con_width() >> 1, (con_height() >> 1) + 9);
      con_print("Your score is ");
      con_print(string_of_int(this.stage.score));
      con_move(con_width() >> 1, (con_height() >> 1) + 10);
      con_print("Press escape to exit or \"R\" to restart.");
      
      /* 82 is R, 114 is r */
      k = con_getch();
      while (k != 82 & k != 114 & k != 27) {
	k = con_getch();
      }
      if (k == 82 | k == 114){
	this.init();
	this.win = 2;
      }
      else {
	this.quit = 1;
      }
    }
    /* message on game over */
    if(this.win == 0){
      con_clear();
      for (int i = 0; i < length_of_array(this.won_lost[this.win]); i = i+1;){
	con_move((con_width() >> 1) - 20, (con_height() >> 1) + i);
	con_print(this.won_lost[this.win][i]);
      }
      con_move(con_width() >> 1, (con_height() >> 1) + 9);
      con_print("Your score is ");
      con_print(string_of_int(this.stage.score));
      con_move(con_width() >> 1, (con_height() >> 1) + 10);
      con_print("Press escape to exit or \"R\" to restart.");

      /* 82 is R, 114 is r */
      k = con_getch();
      while (k != 82 & k != 114 & k != 27) {
	k = con_getch();
      }
      if (k == 82 | k == 114){
	this.init();
	this.win = 2;
      }
      else {
	this.quit = 1;
      }
    }

    con_refresh();
    return;
  }
};

/* con colors 
 * 1 - red
 * 2 - green 
 * 3 - yellow
 * 4 - blue
 * 5 - purple
 * 6 - pink
 * 7 - lighter blue
 * 8 - 
 * 0 - white/black (main).
 */

/* Prints instructions to the main screen. Called first thing. */
unit instructions() {
  int k = 0;
  int color = 0;
  con_clear();
  con_move(0, 1);
  con_attrset(con_color(1));
  con_print("888888b.            888      888      888          \n");
  con_print("888  \"88b           888      888      888         \n");
  con_print("888  .88P           888      888      888          \n");
  con_print("8888888K.  888  888 88888b.  88888b.  888  .d88b.  \n");
  con_print("888  \"Y88b 888  888 888 \"88b 888 \"88b 888 d8P  Y8b \n");
  con_print("888    888 888  888 888  888 888  888 888 88888888 \n");
  con_print("888   d88P Y88b 888 888 d88P 888 d88P 888 Y8b.     \n");
  con_print("8888888P\"   \"Y88888 88888P\"  88888P\"  888  \"Y8888  \n");
  con_print("\n\n\n\n");
  
  
  con_print("88888888888                       888      888          \n");
  con_print("    888                           888      888          \n");
  con_print("    888                           888      888          \n");
  con_print("    888  888d888 .d88b.  888  888 88888b.  888  .d88b.  \n");
  con_print("    888  888P\"  d88\"\"88b 888  888 888 \"88b 888 d8P  Y8b \n");
  con_print("    888  888    888  888 888  888 888  888 888 88888888 \n");
  con_print("    888  888    Y88..88P Y88b 888 888 d88P 888 Y8b.     \n");
  con_print("    888  888     \"Y88P\"   \"Y88888 88888P\"  888  \"Y8888  \n");
  con_print("\n\n");
  con_print("---------------------------------------------------------\n");
  con_print(" | j - Move left \n");
  con_print(" | l - Move right \n");
  con_print(" | space - Fire \n");
  con_print(" | Ctrl+C - quit \n");
  con_print(" | [Press enter key to begin]\n");
  con_print("---------------------------------------------------------\n");
  
  con_move(0,0);
  con_attrset(con_color(0));
  con_refresh();
  while (k != 13) {
    k = con_getch();
  }
  return;
}

/* Print thank you message, bye bye or something */
unit lose() {
  return;
}

/* The main program loop, it creates a new game state, and loops until user loses 
   or presses escape button */
int program(int argc, string[] argv){
  int minx = 80;
  int miny = 25;
  con_init();
  instructions();
  if ((con_width() >= minx) & (con_height() >= miny)) {
    State state = new State();
    int quit = 0;
    int k = 0;
    int something = 0;
    state.init();
    something = con_halfdelay(1);
    while ((k != 27) & !quit) {
      state.display();
      k = con_getch();
      if(k == 80 | k == 112){
	state.pause = 2;
      }
      state.update(k);
      quit = state.quit;
    }
    lose();
  } 
  else {
    print_string("Minimum size of the console is 80x25! \n");
  }
  con_cleanup();
  return 0;
}
